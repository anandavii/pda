current_enrollment_status == 11 ~ "Enrolled in a graduate program",
current_enrollment_status < 0 ~ NA_character_
))
# Verify the count of different enrollment statuses
nlsy_df %>%
count(current_enrollment_status, sort = TRUE) %>%
rename(count = n)
# Check the data
unique(nlsy_df$total_income_2016)
# Handle negative values and replace with NA
nlsy_df <- nlsy_df %>%
mutate(total_income_2016 = ifelse(total_income_2016 < 0, NA, total_income_2016))
# Summarize the total_income_2016 column
summary(nlsy_df$total_income_2016)
# Count the number of missing values
sum(is.na(nlsy_df$total_income_2016))
# Calculate the percentage of missing values
sum(is.na(nlsy_df$total_income_2016)) / nrow(nlsy_df) * 100
# Number of Topcoded values(repondents with higher income)
topcoded <- with(nlsy_df, sum(total_income_2016 == max(total_income_2016, na.rm = TRUE), na.rm = TRUE))
topcoded
# Summarize the total_income_2016 column excluding topcoded values and removing NA rows
nlsy_no_topcoded <- nlsy_df %>%
filter(total_income_2016 != max(total_income_2016, na.rm = TRUE))
summary(nlsy_no_topcoded$total_income_2016)
# Visualizing income distribution histogram including the topcoded values
plot1 <- ggplot(nlsy_df, aes(x = total_income_2016)) +
geom_histogram(bins = 30, fill = "purple", color = "black", na.rm = TRUE) +
labs(
title = "Fig1. Total Income 2016",
subtitle = "Including Topcoded values",
x = "Total Income for 2016",
y = "Frequency on income"
)
# Visualizing income distribution boxplot  including the topcoded values
plot2 <- ggplot(nlsy_df, aes(y = total_income_2016)) +
geom_boxplot(fill = "cyan", color = "black", na.rm = TRUE) +
labs(
title = "Fig1.1 Total Income 2016",
subtitle = "Including Topcoded values",
y = "Total Income"
)
# Visualizing income distribution histogram excluding the topcoded values
nlsy_no_topcoded <- nlsy_df %>%
filter(total_income_2016 != max(total_income_2016, na.rm = TRUE))
plot3 <- ggplot(nlsy_no_topcoded, aes(x = total_income_2016)) +
geom_histogram(bins = 30, fill = "purple", color = "black", na.rm = TRUE) +
labs(
title = "Fig2. Total Income 2016",
subtitle = "Excluding Topcoded values",
x = "Total Income for 2016",
y = "Frequency on income"
)
# Visualizing income distribution boxplot excluding the topcoded values
plot4 <- ggplot(nlsy_no_topcoded, aes(y = total_income_2016)) +
geom_boxplot(fill = "cyan", color = "black", na.rm = TRUE) +
labs(
title = "Fig2.1 Total Income 2016",
subtitle = "Excluding Topcoded values",
y = "Total Income"
)
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
# Check for unique values and if any missing values are present
unique(nlsy_df$race)
table(nlsy_df$race, useNA = "ifany")
# Recode race values into descriptive labels
nlsy_df <- nlsy_df %>%
mutate(race = case_when(
race == 1 ~ "Black",
race == 2 ~ "Hispanic",
race %in% c(3, 4) ~ "Other" # Combine "Mixed Race" and "Non-Black" into "Other"
)) %>%
mutate(race = factor(race, levels = c("Black", "Hispanic", "Other")))
# Count the number of respondents in each race group
nlsy_df %>%
count(race, sort = TRUE) %>%
rename(count = n)
# Race Summary
ggplot(nlsy_df, aes(x = reorder(race, -table(race)[race]), fill = race)) +
geom_bar() +
geom_text(aes(label = ..count..), stat = "count", vjust = 6, size = 6) +
labs(
title = "Race Distribution Plot", x = "Race", y = "Count",
subtitle = "Note: 'Other' includes Mixed Race and Non-Black"
)
# Check for unique values and if any missing values are present
unique(nlsy$highest_grade_completed)
table(nlsy$highest_grade_completed, useNA = "ifany")
# Replace negative values with NA
nlsy <- nlsy %>%
mutate(highest_grade_completed = ifelse(highest_grade_completed < 0, NA, highest_grade_completed))
# Recode highest grade completed into descriptive labels
nlsy <- nlsy %>%
mutate(highest_grade_completed = case_when(
highest_grade_completed == 0 ~ "None",
highest_grade_completed == 1 ~ "1st Grade",
highest_grade_completed == 2 ~ "2nd Grade",
highest_grade_completed == 3 ~ "3rd Grade",
highest_grade_completed == 4 ~ "4th Grade",
highest_grade_completed == 5 ~ "5th Grade",
highest_grade_completed == 6 ~ "6th Grade",
highest_grade_completed == 7 ~ "7th Grade",
highest_grade_completed == 8 ~ "8th Grade",
highest_grade_completed == 9 ~ "9th Grade",
highest_grade_completed == 10 ~ "10th Grade",
highest_grade_completed == 11 ~ "11th Grade",
highest_grade_completed == 12 ~ "12th Grade",
highest_grade_completed == 13 ~ "1st Year College",
highest_grade_completed == 14 ~ "2nd Year College",
highest_grade_completed == 15 ~ "3rd Year College",
highest_grade_completed == 16 ~ "4th Year College",
highest_grade_completed == 17 ~ "5th Year College",
highest_grade_completed == 18 ~ "6th Year College",
highest_grade_completed == 19 ~ "7th Year College",
highest_grade_completed == 20 ~ "8th Year College or More",
highest_grade_completed == 95 ~ "Ungraded",
highest_grade_completed < 0 ~ NA_character_
))
# Verify the count of different grades
nlsy %>%
count(highest_grade_completed, sort = TRUE) %>%
rename(count = n)
# Create the plot with proper count calculation
ggplot(nlsy, aes(x = reorder(highest_grade_completed, table(highest_grade_completed)[highest_grade_completed]), fill = highest_grade_completed)) +
geom_bar(stat = "count", show.legend = FALSE) +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, size = 3) +
labs(title = "Distribution of Highest Grade Completed", x = "Highest Grade Completed", y = "Count") +
theme(axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1))
# Checking if Age as of 1996 december 31st needs cleaning | unique values: 13 12 16 15 14
# The variable Age shows the minimum expected value in survey response is 12, 1st quartile is 13, median is 14, mean is 13.99, 3rd quartile is 15, and max is 16. This variable does not have any missing values and hence no cleaning is required.
unique(nlsy_df$age_1996)
summary(nlsy_df$age_1996)
# The tabular form of data displayed below shows the age and number of people having that age.
nlsy_df %>%
count(age_1996, sort = TRUE) %>%
rename(count = n)
# Plotting age and its concentration
ggplot(data = nlsy_df, aes(x = age_1996, fill = age_1996)) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(
title = "What is the Age of the respondants as of 21/31/1996",
x = "Age (as of 12/31/1996)", y = "Count",
) +
theme_minimal()
# Checking if Citizenship requires cleaning | unique values:  1 3 2 -4
# Citizenship is a variable have 1,2,3 as response in the survey and -4, a negative value indicating Valid Skip. We will be cleaning this variable to replace -4 in the data with NA. Furthermore, summarizing this variable we get min value as -4 ( which will be treated later), 1st quartile is 1, median is 1, mean is 0.6279, 3rd quartile is 1, and max is 3.
unique(nlsy_df$citizenship)
summary(nlsy_df$citizenship)
# The tabular form of data displayed below shows the age and number of people having that age.
# Here we see that there is a significant number of responses with negative value in our data set for Citizenship variable. If we change -4 to NA, then 1042 data will be omitted when we plot it which might introduce biases in the data and the output might not be accurate.
nlsy_df %>%
count(citizenship, sort = TRUE) %>%
rename(count = n)
# Replace -4 with NA in the Citizenship column
nlsy_df <- nlsy_df %>%
mutate(
citizenship = ifelse(citizenship %in% c(-4), NA, citizenship)
)
# Verify the changes
table(nlsy_df$citizenship, useNA = "always")
# For this question 'What is the citizenship', we have marked 1 as Citizen, born in the U.S., 2 as Unknown, not born in U.S., 3 as Unknown, not born in U.S., and for all negative values we have used NA. The table below shows the count of each kind of responses.
nlsy_df <- nlsy_df %>%
mutate(citizenship = case_when(
citizenship == 1 ~ "Citizen",
citizenship == 2 ~ "Birthplace Unknown",
citizenship == 3 ~ "Non-Citizen",
citizenship < 1 ~ NA_character_
))
# Upon mutating values for citizenship to make it categorical we have replaced -4 with NA for 1042 rows, 1 with Citizen, born in the U.S., 2 with Unknown, not born in U.S., 3 with Unknown, can't determine birthplace, and anything less than 1 with NA. This helps us in easily reading the analysis.
nlsy_df %>%
count(citizenship, sort = TRUE) %>%
rename(count = n)
# Plotting citizenship and its concentration
ggplot(data = nlsy_df, aes(x = citizenship, fill = citizenship)) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(
title = "What is the Citizenship of the respondant",
x = "Citizenship", y = "Count",
) +
theme_minimal()
# The graph below shows how the response is ranged across. It illustrates that majority of the respondants have a citizenship of the U.S. and constitutes to 6869 out of 8984, some don't know their birthplace constitute to 794, some who were not born in the U.S. adds up to 279, and the remaining 1042 were all missing data. This, we can say that 76.45% of the people were born in the U.S., 3.1% were not born in the U.S, 8.83% cannot determine their birthplace, and 11.5% of significant population skipped the question.
# This variable Citizenship has different values like Non-Citizen, Birthplace Unknown, Citizen , and NA. Possible responses are 0,1,-1,-2,-3 where 0 indicates No, 1 indicates Yes, -1 indicates Refusal, -2 indicates Don't know, and -3 indicates Invalid Skip. To clean this we will be taking -1 and -2 into consideration as it can tell us if respondents might be hiding the truth. However, we can replace -3 with NA to get the accurate analysis done for this variable.
unique(nlsy_df$used_marijuana)
summary(nlsy_df$used_marijuana)
# To clean the variable Used Marijuana, we are performing following steps like converting to categorical values for ease of analysis.
# Replace -3 with NA in the Used_Marijuana
nlsy_df <- nlsy_df %>%
mutate(
used_marijuana = ifelse(used_marijuana %in% c(-3), NA, used_marijuana)
)
# Verify the changes
table(nlsy_df$used_marijuana, useNA = "always")
# Here we have different factor levels like Don't know, Refusal, No, Yes for Factor used_marijuana.
nlsy_df <- nlsy_df %>%
mutate(used_marijuana = factor(used_marijuana, levels = c(-2, -1, 0, 1), labels = c("Don't Know", "Refusal", "No", "Yes")))
# Upon factoring values for used_marihjuana to make it categorical we have replaced -3 with NA for 2 rows, 1 with Yes, 0 with No, -1 with Refusal, and -2 with don't know. This helps us in easily reading the analysis.
nlsy_df %>%
count(used_marijuana, sort = TRUE) %>%
rename(count = n)
# Plotting used_marijuana
ggplot(data = nlsy_df, aes(x = reorder(used_marijuana, -table(used_marijuana)[used_marijuana]), fill = used_marijuana)) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(
title = "Have you ever used marijuana?",
x = "Used Marijuana", y = "Count",
) +
scale_fill_brewer(palette = "Set3", name = "Type of Responses") +
theme_minimal()
# The graph below illustrates that 79.56% (7148) of respondents do not use marijuana, 19.97% (1795) use marijuana, 0.05% (5) don't know if the used it, 0.37% (34) refused to answer the question, and the question was a invalid skip for 2 people. By this plot, we can say that 0.43% (39) people might be hiding some information on use of marijuana. There is a significant number of respondents who use marijuana.
# Checking unique values in industry_code
unique(nlsy_df$industry_code)
table(nlsy_df$industry_code, useNA = "ifany")
# Recoding industry_code with descriptive labels
nlsy_df <- nlsy_df %>%
mutate(industry_code = case_when(
industry_code >= 170 & industry_code <= 290 ~ "Agriculture, Forestry, and Fisheries",
industry_code >= 370 & industry_code <= 490 ~ "Mining",
industry_code >= 570 & industry_code <= 690 ~ "Utilities",
industry_code == 770 ~ "Construction",
industry_code >= 1070 & industry_code <= 3990 ~ "Manufacturing",
industry_code >= 4070 & industry_code <= 4590 ~ "Wholesale Trade",
industry_code >= 4670 & industry_code <= 5790 ~ "Retail Trade",
industry_code == 5890 ~ "Arts, Entertainment, and Recreation Services",
industry_code >= 6070 & industry_code <= 6390 ~ "Transportation and Warehousing",
industry_code >= 6470 & industry_code <= 6780 ~ "Information and Communication",
industry_code >= 6870 & industry_code <= 7190 ~ "Finance, Insurance, and Real Estate",
industry_code >= 7270 & industry_code <= 7790 ~ "Professional and Related Services",
industry_code >= 7860 & industry_code <= 8470 ~ "Educational, Health, and Social Services",
industry_code >= 8560 & industry_code <= 8690 ~ "Entertainment, Accommodations, and Food Services",
industry_code >= 8770 & industry_code <= 9290 ~ "Other Services",
industry_code >= 9370 & industry_code <= 9590 ~ "Public Administration",
industry_code >= 9670 & industry_code <= 9890 ~ "Active Duty Military",
industry_code >= 9950 & industry_code <= 9990 ~ "ACS Special Codes",
industry_code < 0 ~ NA_character_ # Handling special codes (-5, -4, -3)
))
# Counting missing values
sum(is.na(nlsy_df$industry_code))
# Calculating the percentage of missing values
sum(is.na(nlsy_df$industry_code)) / nrow(nlsy_df) * 100
# Verifying the count of each industry_code
nlsy_df %>%
count(industry_code, sort = TRUE) %>%
rename(count = n)
# Visualizing industry code distribution with a bar plot
ggplot(data = nlsy_df, aes(x = industry_code)) +
geom_bar(fill = "pink", color = "black") +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(
title = "Industry Code Distribution",
x = "Industry Code Types",
y = "Count"
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Checking unique values
unique(nlsy_df$marital_status)
table(nlsy_df$marital_status, useNA = "ifany")
# Recode marital_status values into descriptive labels
nlsy_df <- nlsy_df %>%
mutate(marital_status = case_when(
marital_status == 0 ~ "Never-married",
marital_status == 1 ~ "Married",
marital_status %in% c(2, 3, 4) ~ "Other" # Combine "Separated", "Divorced", "Widowed"
)) %>%
mutate(marital_status = factor(marital_status, levels = c("Never-married", "Married", "Other")))
# Counting the number of missing values
sum(is.na(nlsy_df$marital_status))
# Calculating the percentage of missing values
sum(is.na(nlsy_df$marital_status)) / nrow(nlsy_df) * 100
# Verifying the count of each industry_code
nlsy_df %>%
count(marital_status, sort = TRUE) %>%
rename(count = n)
# Visualizing marital status distribution with a bar plot
ggplot(data = nlsy_df, aes(x = marital_status, fill = marital_status)) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(
title = "What is the Marital Status?",
x = "Marital Status",
y = "Count",
subtitle = "Note: 'Other' includes Separated, Divorced and Widowed"
) +
theme_minimal()
# Checking unique values in total_num_incarcerations
unique(nlsy_df$total_num_incarcerations)
table(nlsy_df$total_num_incarcerations, useNA = "ifany")
# Recoding total_num_incarcerations into descriptive labels
nlsy_df <- nlsy_df %>%
mutate(total_num_incarcerations = case_when(
total_num_incarcerations == 0 ~ "No incarcerations",
total_num_incarcerations >= 1 & total_num_incarcerations <= 2 ~ "1 to 2 incarcerations",
total_num_incarcerations >= 3 & total_num_incarcerations <= 4 ~ "3 to 4 incarcerations",
total_num_incarcerations >= 5 & total_num_incarcerations <= 6 ~ "5 to 6 incarcerations",
total_num_incarcerations >= 7 & total_num_incarcerations <= 8 ~ "7 to 8 incarcerations",
total_num_incarcerations >= 9 & total_num_incarcerations <= 10 ~ "9 to 10 incarcerations",
total_num_incarcerations >= 11 & total_num_incarcerations <= 12 ~ "11 to 12 incarcerations",
total_num_incarcerations >= 13 & total_num_incarcerations <= 14 ~ "13 to 14 incarcerations",
total_num_incarcerations >= 15 & total_num_incarcerations <= 16 ~ "15 to 16 incarcerations",
total_num_incarcerations >= 17 & total_num_incarcerations <= 18 ~ "17 to 18 incarcerations",
total_num_incarcerations >= 19 & total_num_incarcerations <= 20 ~ "19 to 20 incarcerations",
total_num_incarcerations < 0 ~ NA_character_ # Handling special codes (-1, -2, -3)
))
# Counting the number of missing values
sum(is.na(nlsy_df$total_num_incarcerations))
# Calculating the percentage of missing values
sum(is.na(nlsy_df$total_num_incarcerations)) / nrow(nlsy_df) * 100
# Verifying the count of total_num_incarcerations for different levels
nlsy_df %>%
count(total_num_incarcerations, sort = TRUE) %>%
rename(count = n)
# Bar plot for college_type
ggplot(data = nlsy_df, aes(x = total_num_incarcerations)) +
geom_bar(fill = "lightgreen", color = "black") +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.4) +
labs(
title = "Total number of Incarcerations",
x = "Number of Incarcerations",
y = "Count"
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 0.8))
# Checking unique values in college_type
unique(nlsy_df$college_type)
table(nlsy_df$college_type, useNA = "ifany")
# Changing factor levels for college_type into labels
nlsy_df <- nlsy_df %>%
mutate(college_type = case_when(
college_type == 1 ~ "Public institution",
college_type == 2 ~ "Private not-for-profit institution",
college_type == 3 ~ "Private for-profit institution",
college_type < 0 ~ NA_character_ # Handling special codes (-1, -2, -3, -4, -5)
))
# Counting the number of missing values
sum(is.na(nlsy_df$college_type))
# Calculating the percentage of missing values
sum(is.na(nlsy_df$college_type)) / nrow(nlsy_df) * 100
# Verifying the count of each industry_code
nlsy_df %>%
count(college_type, sort = TRUE) %>%
rename(count = n)
# Bar plot for college_type
ggplot(data = nlsy_df, aes(x = college_type)) +
geom_bar(fill = "orange", color = "black") +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.2) +
labs(
title = "College Type Distribution",
x = "College Type",
y = "Count"
) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
# Checking the data for unique values
unique(nlsy_df$trustful_or_not)
table(nlsy_df$trustful_or_not, useNA = "ifany")
# Recode trustful_or_not values into descriptive labels
nlsy_df <- nlsy_df %>%
mutate(trustful_or_not = case_when(
trustful_or_not >= 1 & trustful_or_not <= 3 ~ "Distrustful",
trustful_or_not >= 4 ~ "Trustful",
trustful_or_not < 0 ~ NA_character_ # Handling special codes (-1, -2, -3, -4, -5)
)) %>%
mutate(trustful_or_not = factor(trustful_or_not, levels = c("Distrustful", "Trustful")))
# Counting the number of missing values
sum(is.na(nlsy_df$trustful_or_not))
# Calculating the percentage of missing values
sum(is.na(nlsy_df$trustful_or_not)) / nrow(nlsy_df) * 100
# Verifying the count of each industry_code
nlsy_df %>%
count(trustful_or_not, sort = TRUE) %>%
rename(count = n)
# Bar plot for trustful_or_not
ggplot(data = nlsy_df, aes(x = trustful_or_not, fill = trustful_or_not)) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), vjust = -0.5) +
labs(
title = "IS Trustful or Distrustful",
x = "Trustfulness",
y = "Count"
) +
theme_minimal()
# Summarize income by gender including topcoded variable, excluding NA
gender_income_summary <- nlsy_df %>%
filter(!is.na(total_income_2016)) %>% # Exclude rows with NA in income
group_by(gender) %>%
summarize(
count = n(),
mean_income = round(mean(total_income_2016, na.rm = TRUE)),
median_income = round(median(total_income_2016, na.rm = TRUE)),
sd_income = round(sd(total_income_2016, na.rm = TRUE))
)
print(gender_income_summary)
# Summarize income by gender excluding topcoded variable, excluding NA
# Excuding the top coded values
nlsy_no_topcoded <- nlsy_df %>%
filter(!is.na(total_income_2016)) %>%
filter(total_income_2016 != max(total_income_2016, na.rm = TRUE))
gender_income_summary <- nlsy_no_topcoded %>%
group_by(gender) %>%
summarize(
count = n(), # Count rows after filtering
mean_income = round(mean(total_income_2016, na.rm = TRUE)),
median_income = round(median(total_income_2016, na.rm = TRUE)),
sd_income = round(sd(total_income_2016, na.rm = TRUE))
)
print(gender_income_summary)
plot1 <- ggplot(nlsy_df, aes(x = gender, y = total_income_2016, fill = gender)) +
geom_boxplot(show.legend = FALSE, na.rm = TRUE) +
labs(
title = "Fig1.Income Distribution by Gender",
subtitle = "Including Topcoded values",
x = "Gender",
y = "Total Income"
)
# Plot of Income with Gender excluding topcoded values
nlsy_no_topcoded <- nlsy_df %>%
filter(total_income_2016 != max(total_income_2016, na.rm = TRUE))
plot2 <- ggplot(nlsy_no_topcoded, aes(x = gender, y = total_income_2016, fill = gender)) +
geom_boxplot(show.legend = FALSE) +
labs(
title = "Fig2.Income Distribution by Gender",
subtitle = "Excluding Topcoded values",
x = "Gender",
y = "Total Income"
)
grid.arrange(plot1, plot2, ncol = 2)
# Calculate mean income by race and gender, excluding rows with NA in income
income_by_race_gender <- nlsy_df %>%
filter(!is.na(total_income_2016)) %>% # Exclude rows where income is NA
group_by(race, gender) %>%
summarize(
average_income = round(mean(total_income_2016, na.rm = TRUE)), # Calculate mean income
count = n() # Count rows after filtering
)
# Display the tabular summary
income_by_race_gender
# Create the bar plot for income by race and gender including topcoded values
ggplot(nlsy_df, aes(x = race, y = total_income_2016, fill = gender)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge", show.legend = TRUE, na.rm = TRUE) +
geom_text(
aes(label = round(..y..)),
stat = "summary", fun = "mean", position = position_dodge(width = 0.9), vjust = 6, size = 4
) +
labs(
title = "Income by Race and Gender",
subtitle = "Including Topcoded values",
x = "Race",
y = "Average Income",
fill = "Gender"
)
# Summarize income by citizenship status by gender distribution
# The table below shows the count of respondents for different category of citizenship, mean_income, median_income, and standard deviation. Here we can see that the mean income for citizen is less than the non-citizen and people who don't know their birthplace have the highest mean income. However, the median income for non-citizen is the highest.Also, standard deviation for citizens is lowest compared to non-citizen and unknown birthplace category respondents. The NA consists of valid skip which means the question was not applicable to those respondants and hence we have omitted it. Therefore, the data we see for citizenship status in table or the graph will be for the 7942 responses as out of 8984 we omitted 1042 rows.
# Omit rows where Citizenship is NA
citizen_nlsy_df <- nlsy_df %>%
filter(!is.na(citizenship))
citizenship_income_summary <- citizen_nlsy_df %>%
group_by(citizenship) %>%
summarize(
count = n(),
mean_income = mean(total_income_2016, na.rm = TRUE),
median_income = median(total_income_2016, na.rm = TRUE),
sd_income = sd(total_income_2016, na.rm = TRUE)
)
print(citizenship_income_summary)
# Analyzing income with citizenship based on Gender. Here, citizenship is categorical variable. The graph shows a range from $0-$200,000. The pink box represent male and turquoise boxes represent females. Each box plot shows median, quantiles, and outliers. The graphs show population into four groups called birthplace unknown, citizen, and non-citizen. Males show high median incomes across all citizenship categories as compared to females in turquoise boxes. The median income for males is around $50K, while for females it is lower around $35K. We can also say that the 1st quartile for females lies even below the 25K mark, while for males, the 1st quantile is above the 30K mark. The outliers show dots above the whiskers reaching up to $235K. We can also say that the 1st quantile for female lies even below 25K mark while for male 1st quantile is above 30K mark. We can say that the income disparity between genders appear to be relatively consistent across different citizenship status. Citizens and non-citizens show a kind of similar distribution of income patterns. Also, the boxes are larger for males, which indicates more income variability for them. Having topcoded values gives more accurate median. If we truncate the top 2%, the mean might underestimate the true average.
ggplot(citizen_nlsy_df, aes(x = citizenship, y = total_income_2016, fill = gender)) +
geom_boxplot(na.rm = TRUE) +
scale_fill_manual(values = c("Male" = "#1f77b4", "Female" = "#ff7f0e")) +
labs(
title = "Income vs Citizenship Distribution by Gender",
subtitle = "Including Topcoded Values",
x = "Citizenship",
y = "Total Income"
)
# Filter the data before creating the plot to remove the topcoded values. As we know there are 121 people having topcoded which is 2% level. There income has been average to 235884 and we plan to analyse the data for both with topcoded and without.
no_topcoded_nlsy_df <- nlsy_df %>%
filter(total_income_2016 < 235884)
# Graph with topcoded income values
ggplot(nlsy_df, aes(x = age_1996, y = total_income_2016, color = gender)) +
geom_jitter(alpha = 0.6, width = 0.4, height = 0, na.rm = TRUE) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = "Fig1. Income vs Age (1996) by Gender",
subtitle = "Including Topcoded Values",
x = "Age in 1996",
y = "Income"
) +
theme_minimal() +
scale_color_brewer(palette = "Set1", name = "Gender")
# Graph with no-topcoded income values will exclude the people with higher income and this will help us have even more accurate data as the topcoded income for 2% level is average and it might interfere in our analysis.
ggplot(no_topcoded_nlsy_df, aes(x = age_1996, y = total_income_2016, color = gender)) +
geom_jitter(alpha = 0.6, na.rm = TRUE, width = 0.3, height = 0) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = "Fig2. Income vs Age (1996) by Gender",
subtitle = "Excluding Topcoded Values",
x = "Age in 1996",
y = "Income"
) +
theme_minimal() +
scale_color_brewer(palette = "Set2", name = "Gender")
# Fig1. illustrates a plot for topcoded income vs age distributed by gender. Red point is for male and blue is for female. It shows income in the range $0-$236K. The age of respondents here is as of 12/31/1996. The graphs shows that the income for male is consistently higher than that for females across different ages 12,13,14,15,16. The trend line indicates that income is approximately $50K for males of age 12 to 14 whereas for females it is around $40K from the age 12 to 15. However, we see that income increased to $60K (approx) for male above the age of 14 and decreased to $35K(approx) for females above the age of 15.
# Fig2. depicts a plot for excluding topcoded income for 2% level. It shows income range in $0-$150K. Green point is for male and orange is for female. Here as the data has topcoded values truncated, the remains similar to the previous one. Male income starts from a little below $50K while females start around $37K which is lower as compared to fig1. The income goes slightly up for males above 14 and income goes down for females above the age of 15.
ggplot(nlsy_df, aes(x = used_marijuana, y = total_income_2016, fill = gender)) +
geom_boxplot(alpha = 0.7) +
labs(
title = "Income Distribution by Marijuana Use and Gender",
x = "Used Marijuana",
y = "Income"
) +
scale_fill_brewer(palette = "Set3", name = "Gender") +
theme_minimal()
